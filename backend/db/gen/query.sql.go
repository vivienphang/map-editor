// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMap = `-- name: CreateMap :one
INSERT INTO
    map (name, image_url, created_at)
VALUES
    ($1, $2, $3) RETURNING id, created_at, name, image_url
`

type CreateMapParams struct {
	Name      pgtype.Text `json:"name"`
	ImageUrl  pgtype.Text `json:"image_url"`
	CreatedAt time.Time   `json:"created_at"`
}

func (q *Queries) CreateMap(ctx context.Context, arg CreateMapParams) (Map, error) {
	row := q.db.QueryRow(ctx, createMap, arg.Name, arg.ImageUrl, arg.CreatedAt)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.ImageUrl,
	)
	return i, err
}

const createRoute = `-- name: CreateRoute :one
INSERT INTO
    map_annotations_routes (route, map_id, created_at)
VALUES
    ($1, $2, $3) RETURNING id, created_at, route, map_id
`

type CreateRouteParams struct {
	Route     pgtype.Path `json:"route"`
	MapID     pgtype.UUID `json:"map_id"`
	CreatedAt time.Time   `json:"created_at"`
}

func (q *Queries) CreateRoute(ctx context.Context, arg CreateRouteParams) (MapAnnotationsRoute, error) {
	row := q.db.QueryRow(ctx, createRoute, arg.Route, arg.MapID, arg.CreatedAt)
	var i MapAnnotationsRoute
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Route,
		&i.MapID,
	)
	return i, err
}

const createZone = `-- name: CreateZone :one
INSERT INTO
    map_annotations_zones (zone, map_id, created_at)
VALUES
    ($1, $2, $3) RETURNING id, created_at, zone, map_id
`

type CreateZoneParams struct {
	Zone      pgtype.Polygon `json:"zone"`
	MapID     pgtype.UUID    `json:"map_id"`
	CreatedAt time.Time      `json:"created_at"`
}

func (q *Queries) CreateZone(ctx context.Context, arg CreateZoneParams) (MapAnnotationsZone, error) {
	row := q.db.QueryRow(ctx, createZone, arg.Zone, arg.MapID, arg.CreatedAt)
	var i MapAnnotationsZone
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Zone,
		&i.MapID,
	)
	return i, err
}

const deleteMapById = `-- name: DeleteMapById :exec
DELETE FROM
    map
WHERE
    id = $1
`

func (q *Queries) DeleteMapById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMapById, id)
	return err
}

const getMapById = `-- name: GetMapById :one
SELECT
    id, created_at, name, image_url
FROM
    map
WHERE
    id = $1
`

func (q *Queries) GetMapById(ctx context.Context, id uuid.UUID) (Map, error) {
	row := q.db.QueryRow(ctx, getMapById, id)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.ImageUrl,
	)
	return i, err
}

const getMaps = `-- name: GetMaps :many
SELECT
    id, created_at, name, image_url
FROM
    map
`

func (q *Queries) GetMaps(ctx context.Context) ([]Map, error) {
	rows, err := q.db.Query(ctx, getMaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Map
	for rows.Next() {
		var i Map
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaths = `-- name: GetPaths :many
SELECT
    id, created_at, route, map_id
FROM
    map_annotations_routes
`

func (q *Queries) GetPaths(ctx context.Context) ([]MapAnnotationsRoute, error) {
	rows, err := q.db.Query(ctx, getPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MapAnnotationsRoute
	for rows.Next() {
		var i MapAnnotationsRoute
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Route,
			&i.MapID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRouteById = `-- name: GetRouteById :one
SELECT
    route
FROM
    map_annotations_routes
WHERE
    id = $1
`

func (q *Queries) GetRouteById(ctx context.Context, id uuid.UUID) (pgtype.Path, error) {
	row := q.db.QueryRow(ctx, getRouteById, id)
	var route pgtype.Path
	err := row.Scan(&route)
	return route, err
}

const getRoutesByMapId = `-- name: GetRoutesByMapId :many
SELECT
    route
FROM
    map_annotations_routes
WHERE
    map_id = $1
`

func (q *Queries) GetRoutesByMapId(ctx context.Context, mapID pgtype.UUID) ([]pgtype.Path, error) {
	rows, err := q.db.Query(ctx, getRoutesByMapId, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Path
	for rows.Next() {
		var route pgtype.Path
		if err := rows.Scan(&route); err != nil {
			return nil, err
		}
		items = append(items, route)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZoneById = `-- name: GetZoneById :one
SELECT
    zone
FROM
    map_annotations_zones
WHERE
    id = $1
`

func (q *Queries) GetZoneById(ctx context.Context, id uuid.UUID) (pgtype.Polygon, error) {
	row := q.db.QueryRow(ctx, getZoneById, id)
	var zone pgtype.Polygon
	err := row.Scan(&zone)
	return zone, err
}

const getZones = `-- name: GetZones :many
SELECT
    id, created_at, zone, map_id
FROM
    map_annotations_zones
`

func (q *Queries) GetZones(ctx context.Context) ([]MapAnnotationsZone, error) {
	rows, err := q.db.Query(ctx, getZones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MapAnnotationsZone
	for rows.Next() {
		var i MapAnnotationsZone
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Zone,
			&i.MapID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZonesByMapId = `-- name: GetZonesByMapId :many
SELECT
    zone
FROM
    map_annotations_zones
WHERE
    map_id = $1
`

func (q *Queries) GetZonesByMapId(ctx context.Context, mapID pgtype.UUID) ([]pgtype.Polygon, error) {
	rows, err := q.db.Query(ctx, getZonesByMapId, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Polygon
	for rows.Next() {
		var zone pgtype.Polygon
		if err := rows.Scan(&zone); err != nil {
			return nil, err
		}
		items = append(items, zone)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMapById = `-- name: UpdateMapById :exec
UPDATE
    map
SET
    name = $2, image_url = $3, created_at = $4
WHERE
    id = $1
`

type UpdateMapByIdParams struct {
	ID        uuid.UUID   `json:"id"`
	Name      pgtype.Text `json:"name"`
	ImageUrl  pgtype.Text `json:"image_url"`
	CreatedAt time.Time   `json:"created_at"`
}

func (q *Queries) UpdateMapById(ctx context.Context, arg UpdateMapByIdParams) error {
	_, err := q.db.Exec(ctx, updateMapById,
		arg.ID,
		arg.Name,
		arg.ImageUrl,
		arg.CreatedAt,
	)
	return err
}

const updateZoneById = `-- name: UpdateZoneById :exec
UPDATE
    map_annotations_zones
SET
    zone = $2,
    created_at = $3
WHERE
    map_id = $1
`

type UpdateZoneByIdParams struct {
	MapID     pgtype.UUID    `json:"map_id"`
	Zone      pgtype.Polygon `json:"zone"`
	CreatedAt time.Time      `json:"created_at"`
}

func (q *Queries) UpdateZoneById(ctx context.Context, arg UpdateZoneByIdParams) error {
	_, err := q.db.Exec(ctx, updateZoneById, arg.MapID, arg.Zone, arg.CreatedAt)
	return err
}
